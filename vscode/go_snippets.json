{
    // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "print with +++": {
        "prefix": "px",
        "body": [
            "fmt.Println(\"++++++++++++++++++++++++\")",
            "fmt.Println(\"$1\")",
            "fmt.Println(\"++++++++++++++++++++++++\")"
        ],
        "description": "print with +++"
    },
    "print": {
        "prefix": "print",
        "body": [
            "fmt.Println(\"$1\")"
        ],
        "description": "print"
    },
    "print with ++ blank": {
        "prefix": "pb",
        "body": [
            "fmt.Println(\"++++++++++++++++++++++++\")",
            "$1",
            "fmt.Println(\"++++++++++++++++++++++++\")"
        ],
        "description": "print with +++ blank"
    },
    "function wrap print": {
        "prefix": "wrap",
        "body": [
            "fmt.Println(\"++++++++++++++++++++++++   $1\")",
            "defer fmt.Println(\"++++++++++++++++++++++++\")"
        ],
        "description": "function wrap print"
    },
    "ifer": {
        "prefix": "iff",
        "body": [
            "if err != nil {",
            "    return nil, err",
            "}"
        ]
    }
}
